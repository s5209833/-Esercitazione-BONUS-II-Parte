//---------------------------------------------------------
/**
//    @file		Debug.cpp
//    @brief	Stressing test for all classes
//    @author	Nicolo' Busi	S5209833 
*/
//---------------------------------------------------------

#include<iostream>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>

#include "polygon.h"
#include "rectangle.h"
#include "rhombus.h"
#include "isotrapezoid.h"

#define D1 7		//parameters useful for debugging
#define D2 9
#define B1 3
#define B2 5
#define H  2

int main() {
	//-----------------------------------------FIRST BLOCK OF DEBUGGING-------------------------------------------------------------------------
	/**
	@brief Evocating the costructors/destructors & simulations of graphics interfaces
	*/


	Rectangle rectA(8, 16);		//normal construction 
	cout << endl;
	rectA.Dump();
	cout << endl << endl;

	Rectangle rectB(-2, 0);		//normal construction trying to pass ambiguous parameters
	cout << endl;
	rectB.Dump();
	cout << endl << endl;

	Rectangle rectC;			//default construction
	cout << endl;
	rectC.Dump();
	cout << endl << endl;

	Rectangle rectD = rectA;	//copy construction
	cout << endl;
	rectD.Dump();
	cout << endl << endl;

	//------------------------------------------------------------------------------------------------------------------------------------------

	Rhombus rhomA(8, 16);
	cout << endl;
	rhomA.Dump();
	cout << endl << endl;

	Rhombus rhomB(-2, 0);
	cout << endl;
	rhomB.Dump();
	cout << endl << endl;

	Rhombus rhomC;
	cout << endl;
	rhomC.Dump();
	cout << endl << endl;

	Rhombus rhomD = rhomA;
	cout << endl;
	rhomD.Dump();
	cout << endl << endl;

	//---------------------------------------------------------------------------------------------------------------------------------------///
	
	IsoTrapezoid isoA(8, 16, 6);
	cout << endl;
	isoA.Dump();
	cout << endl << endl;

	IsoTrapezoid isoB(2, 0, 9);
	cout << endl;
	isoB.Dump();
	cout << endl << endl;

	IsoTrapezoid isoC;
	cout << endl;
	isoC.Dump();
	cout << endl << endl;

	IsoTrapezoid isoD = isoA;
	cout << endl;
	isoD.Dump();
	cout << endl << endl;

	//-----------------------------------------SECOND BLOCK OF DEBUGGING------------------------------------------------------------------------

	/**
	@brief checking the correct execution of the operators and access functions
	*/

	cout << "Testing the comparison operator:" << endl << endl;

	if (rectD == rectA)			// testing the comparison operator
	{
		cout << "Working comparison operator" << endl << endl << endl << endl;
	}
	else
	{
		cout << "Comparison operator NOT working" << endl;
	}

	//------------------------------------------------------------------------------------------------------------------------------------------	

	float d1_test = D1;					// setting debug parameters
	float d2_test = D2;
	float perimeter_test = 0;

	cout << "Testing the Perimeter function of Rhombus class:" << endl << endl;

	perimeter_test = 4 * hypotf(d1_test / 2, d2_test / 2);

	cout << "This is the test value of the perimeter: " << perimeter_test << endl << endl;

	rhomC.SetDim(D1, D2);	// setting new measures calling the relative function

	cout << "Instead this is the perimeter value generated by the access function: " << rhomC.GetPerimeter() << endl << endl;
	

	if (perimeter_test == rhomC.GetPerimeter())	// testing perimeter function
	{
		cout << "Working perimeter function" << endl << endl << endl << endl;
	}
	else
	{
		cout << "Perimeter function NOT working" << endl;
	}
	//------------------------------------------------------------------------------------------------------------------------------------------

	float b1_test = B1;
	float b2_test = B2;
	float h_test = H;
	float area_test = 0;

	cout << "Testing the Area function of IsoTrapezoid class:" << endl << endl;

	area_test = (b1_test + b2_test) * h_test / 2;

	cout << "This is the test value of the area: " << area_test << endl << endl;

	isoC.SetDim(B1, B2, H);

	cout << "Instead this is the area value generated by the access function: " << isoC.GetArea() << endl << endl;

	if (area_test == isoC.GetArea())
	{
		cout << "Working area funtion" << endl << endl << endl << endl;
	}
	else
	{
		cout << "Area funtion NOT working" << endl;
	}

	return 0;
	
}